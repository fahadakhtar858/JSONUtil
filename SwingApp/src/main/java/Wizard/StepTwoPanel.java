package Wizard;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.JsonPrimitive;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import model.Node;
import model.TransformedNode;
import model.TransformerNodeAttribute;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author Fahad.Akhter
 */
public class StepTwoPanel extends javax.swing.JPanel {

    /**
     * Creates new form StepOnePanel
     */
    public StepTwoPanel() {
        initComponents();
        addTreeSelectionListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jsonTreeLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        nodeDetailsLabel = new javax.swing.JLabel();
        nodePanel = new javax.swing.JPanel();
        nodeNameLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        typeField = new javax.swing.JTextField();
        nodetypeLabel = new javax.swing.JLabel();
        minField = new javax.swing.JTextField();
        nodeMinLengthLabel = new javax.swing.JLabel();
        maxField = new javax.swing.JTextField();
        nodeMaxLengthLabel = new javax.swing.JLabel();
        nodeValueLabel = new javax.swing.JLabel();
        valueField = new javax.swing.JTextField();
        descriptionLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        isReq = new javax.swing.JCheckBox();
        updateBtn = new javax.swing.JToggleButton();
        rowField = new javax.swing.JTextField();
        nodeRowLabel = new javax.swing.JLabel();
        colField = new javax.swing.JTextField();
        nodeColLabel = new javax.swing.JLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jsonTreeLabel1.setText("JSON Tree");

        jScrollPane1.setViewportView(jTree1);

        nodeDetailsLabel.setText("Node Data");

        nodeNameLabel.setText("Node Name:");

        nodetypeLabel.setText("Type:");

        nodeMinLengthLabel.setText("Min Length:");

        nodeMaxLengthLabel.setText("Max Length:");

        nodeValueLabel.setText("Node Value:");

        descriptionLabel.setText("Description:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        isReq.setText("Required");

        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        nodeRowLabel.setText("Rows:");

        nodeColLabel.setText("Columns:");

        javax.swing.GroupLayout nodePanelLayout = new javax.swing.GroupLayout(nodePanel);
        nodePanel.setLayout(nodePanelLayout);
        nodePanelLayout.setHorizontalGroup(
            nodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nodePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(nodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nodeRowLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(colField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(nameField)
                    .addComponent(valueField)
                    .addComponent(typeField)
                    .addComponent(minField)
                    .addComponent(maxField)
                    .addGroup(nodePanelLayout.createSequentialGroup()
                        .addComponent(isReq)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 247, Short.MAX_VALUE)
                        .addComponent(updateBtn))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE)
                    .addComponent(nodeColLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(nodePanelLayout.createSequentialGroup()
                        .addGroup(nodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nodeNameLabel)
                            .addComponent(nodeValueLabel)
                            .addComponent(nodetypeLabel)
                            .addComponent(nodeMinLengthLabel)
                            .addComponent(nodeMaxLengthLabel))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(descriptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rowField, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        nodePanelLayout.setVerticalGroup(
            nodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nodePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nodeNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nodeValueLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(valueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nodetypeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(typeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nodeMinLengthLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(minField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nodeMaxLengthLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maxField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nodeColLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(colField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nodeRowLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rowField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(nodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isReq)
                    .addComponent(updateBtn))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jsonTreeLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(nodePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nodeDetailsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jsonTreeLabel1)
                    .addComponent(nodeDetailsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(nodePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
        if (selectedNode != null) {
            Object userObject = selectedNode.getUserObject();
            if (userObject instanceof TransformedNode) {
                TransformedNode transformedNode = (TransformedNode) userObject;
                Node node = transformedNode.getNode();
                node.setKey(nameField.getText());
                node.setValue(valueField.getText());
            
                transformedNode.setType(typeField.getText());
                transformedNode.setMinLength(Integer.parseInt(minField.getText()));
                transformedNode.setMaxLength(Integer.parseInt(maxField.getText()));
                transformedNode.setDesc(jTextArea1.getText());
                transformedNode.setReq(String.valueOf(isReq.isSelected()));
                transformedNode.setCol(Integer.parseInt(colField.getText().trim()));
                transformedNode.setRow(Integer.parseInt(rowField.getText().trim()));
            
                selectedNode.setUserObject(transformedNode);
                //jTree1.updateUI();
        }
        }
    }//GEN-LAST:event_updateBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField colField;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JCheckBox isReq;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTree jTree1;
    private javax.swing.JLabel jsonTreeLabel1;
    private javax.swing.JTextField maxField;
    private javax.swing.JTextField minField;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nodeColLabel;
    private javax.swing.JLabel nodeDetailsLabel;
    private javax.swing.JLabel nodeMaxLengthLabel;
    private javax.swing.JLabel nodeMinLengthLabel;
    private javax.swing.JLabel nodeNameLabel;
    private javax.swing.JPanel nodePanel;
    private javax.swing.JLabel nodeRowLabel;
    private javax.swing.JLabel nodeValueLabel;
    private javax.swing.JLabel nodetypeLabel;
    private javax.swing.JTextField rowField;
    private javax.swing.JTextField typeField;
    private javax.swing.JToggleButton updateBtn;
    private javax.swing.JTextField valueField;
    // End of variables declaration//GEN-END:variables
   /* public void populateTree(String jsonFilePath) {
        try {
            Gson gson = new Gson();
            JsonElement jsonElement = gson.fromJson(new java.io.FileReader(jsonFilePath), JsonElement.class);

            DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode("Root");
            addJsonNode(jsonElement, rootNode);

            DefaultTreeModel treeModel = new DefaultTreeModel(rootNode);
            jTree1.setModel(treeModel);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
        private void addJsonNode(JsonElement jsonElement, DefaultMutableTreeNode parentNode) {
        if (jsonElement.isJsonObject()) {
            JsonObject jsonObject = jsonElement.getAsJsonObject();
            for (java.util.Map.Entry<String, JsonElement> entry : jsonObject.entrySet()) {
                String key = entry.getKey();
                JsonElement value = entry.getValue();
                DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(key);
                parentNode.add(childNode);
                addJsonNode(value, childNode);
            }
        } else if (jsonElement.isJsonArray()) {
            JsonArray jsonArray = jsonElement.getAsJsonArray();
            for (int i = 0; i < jsonArray.size(); i++) {
                JsonElement value = jsonArray.get(i);
                DefaultMutableTreeNode childNode = new DefaultMutableTreeNode("[" + i + "]");
                parentNode.add(childNode);
                addJsonNode(value, childNode);
            }
        } else {
            String value = jsonElement.getAsString();
            parentNode.add(new DefaultMutableTreeNode(value));
        }
    }*/
    public void populateTree(List<TransformedNode> transformedNodes){
        DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode("JSON Tree");
        for (TransformedNode transformedNode : transformedNodes) {
            DefaultMutableTreeNode treeNode = createTreeNode(transformedNode);
            rootNode.add(treeNode);
        }
        DefaultTreeModel treeModel = new DefaultTreeModel(rootNode);
        jTree1.setModel(treeModel);
        jTree1.setCellRenderer(new DefaultTreeCellRenderer() {
            @Override
            public java.awt.Component getTreeCellRendererComponent(JTree tree, Object value,
                    boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus) {
                super.getTreeCellRendererComponent(tree, value, sel, expanded, leaf, row, hasFocus);
                if (value instanceof DefaultMutableTreeNode) {
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) value;
                    Object userObject = node.getUserObject();
                    if (userObject instanceof TransformedNode) {
                        TransformedNode transformedNode = (TransformedNode) userObject;
                        setText(transformedNode.getNode().getKey() );
                    }
                }
                return this;
            }
        });
    }
    
    private DefaultMutableTreeNode createTreeNode(TransformedNode transformedNode) {
        Node node = transformedNode.getNode();
        DefaultMutableTreeNode treeNode = new DefaultMutableTreeNode(node.getKey());

        if (transformedNode.getSubNodes() != null) {
            for (TransformedNode subNode : transformedNode.getSubNodes()) {
                DefaultMutableTreeNode subTreeNode = createTreeNode(subNode);
                treeNode.add(subTreeNode);
            }
        } else {
            String value = node.getValue().toString();
            DefaultMutableTreeNode valueNode = new DefaultMutableTreeNode(value);
            treeNode.add(valueNode);
        }
        treeNode.setUserObject(transformedNode);
        return treeNode;
    }

//    public void populateTree(HashMap<String, TransformerNodeAttribute> hmTranformerNodeAttrib){
//            DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode("JSON Tree");
//
//    for (Map.Entry<String, TransformerNodeAttribute> entry : hmTranformerNodeAttrib.entrySet()) {
//        String key = entry.getKey();
//        TransformerNodeAttribute value = entry.getValue();
//
//        DefaultMutableTreeNode categoryNode = new DefaultMutableTreeNode(key ); //" (" + value + ")");
//        rootNode.add(categoryNode);
//
//        if (value.getSubNodes() != null && !value.getSubNodes().isEmpty()) {
//            for (TransformedNode subNode : value.getSubNodes()) {
//                DefaultMutableTreeNode subNodeTree = createSubNodeTree(subNode);
//                categoryNode.add(subNodeTree);
//            }
//        }
//    }
//
//    TreeModel treeModel = new DefaultTreeModel(rootNode);
//    jTree1.setModel(treeModel);    
//    }
//    
//    private DefaultMutableTreeNode createSubNodeTree(TransformedNode node) {
//        DefaultMutableTreeNode subNodeTree = new DefaultMutableTreeNode(node.getNode().getKey() + " (" + node.getType() + ")");
//    
//        if (node.getSubNodes() != null && !node.getSubNodes().isEmpty()) {
//            for (TransformedNode subNode : node.getSubNodes()) {
//                DefaultMutableTreeNode childNode = createSubNodeTree(subNode);
//                subNodeTree.add(childNode);
//            }
//        }   
//    
//        return subNodeTree;
//    }
//
//        
//        public void populateTree(String filePath) {
//        try {
//            JsonElement jsonElement = JsonParser.parseReader(new FileReader(filePath));
//            DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode("JSON");
//
//            if (jsonElement.isJsonObject()) {
//                JsonObject jsonObject = jsonElement.getAsJsonObject();
//                populateObject(jsonObject, rootNode);
//            } else if (jsonElement.isJsonArray()) {
//                JsonArray jsonArray = jsonElement.getAsJsonArray();
//                populateArray(jsonArray, rootNode);
//            }
//
//            TreeModel treeModel = new DefaultTreeModel(rootNode);
//            jTree1.setModel(treeModel);
//            jTree1.addTreeSelectionListener(e -> {
//                TreePath path = e.getPath();
//                DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) path.getLastPathComponent();
//                if (selectedNode.getUserObject() instanceof JsonLeaf) {
//                    JsonLeaf leaf = (JsonLeaf) selectedNode.getUserObject();
//                    //keyField.setText(leaf.getKey());
//                    valueField.setText(leaf.getValue());
//                } else {
//                    //keyField.setText("");
//                    valueField.setText("");
//                }
//            });
//
//        } catch (IOException e) {
//            JOptionPane.showMessageDialog(this, "Error reading JSON file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
//        }
//    }
//
//    private void populateObject(JsonObject jsonObject, DefaultMutableTreeNode parentNode) {
//        for (String key : jsonObject.keySet()) {
//            JsonElement jsonElement = jsonObject.get(key);
//            if (jsonElement.isJsonObject()) {
//                DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(key);
//                populateObject(jsonElement.getAsJsonObject(), childNode);
//                parentNode.add(childNode);
//            } else if (jsonElement.isJsonArray()) {
//                DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(key);
//                populateArray(jsonElement.getAsJsonArray(), childNode);
//                parentNode.add(childNode);
//            } else if (jsonElement.isJsonPrimitive()) {
//                JsonPrimitive primitive = jsonElement.getAsJsonPrimitive();
//                String value = primitive.isString() ? primitive.getAsString() : primitive.toString();
//                parentNode.add(new DefaultMutableTreeNode(new JsonLeaf(key, value)));
//            }
//        }
//    }
//
//    private void populateArray(JsonArray jsonArray, DefaultMutableTreeNode parentNode) {
//        for (int i = 0; i < jsonArray.size(); i++) {
//            JsonElement jsonElement = jsonArray.get(i);
//            if (jsonElement.isJsonObject()) {
//                DefaultMutableTreeNode childNode = new DefaultMutableTreeNode("Item " + (i + 1));
//                populateObject(jsonElement.getAsJsonObject(), childNode);
//                parentNode.add(childNode);
//            } else if (jsonElement.isJsonArray()) {
//                DefaultMutableTreeNode childNode = new DefaultMutableTreeNode("Item " + (i + 1));
//                populateArray(jsonElement.getAsJsonArray(), childNode);
//                parentNode.add(childNode);
//            } else if (jsonElement.isJsonPrimitive()) {
//                JsonPrimitive primitive = jsonElement.getAsJsonPrimitive();
//                String value = primitive.isString() ? primitive.getAsString() : primitive.toString();
//                parentNode.add(new DefaultMutableTreeNode(new JsonLeaf("Item " + (i + 1), value)));
//            }
//        }
//    }

        private void addTreeSelectionListener() {
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            @Override
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        
    }
        private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {
            
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
            
        if (selectedNode != null) {
            //selectedNode.
            Object userObject = selectedNode.getUserObject();
            if(userObject instanceof TransformedNode transformedNode){
                nameField.setText(transformedNode.getNode().getKey());
                valueField.setText(transformedNode.getNode().getValue().toString());
                typeField.setText(transformedNode.getType());
                minField.setText(transformedNode.getMinLength().toString());
                maxField.setText(transformedNode.getMaxLength().toString());
                jTextArea1.setText(transformedNode.getDesc());
                isReq.setSelected(transformedNode.getReq().equals("true"));
                rowField.setText(transformedNode.getRow().toString());
                colField.setText(transformedNode.getCol().toString());
            }
//
//            if (userObject instanceof Node node) {
//                nameField.setText(node.getKey());
//                valueField.setText(node.getValue().toString());
//                typeField.setText("");
//                minField.setText("");
//                maxField.setText("");
//                jTextArea1.setText("");
//                isReq.setSelected(false);
//            } else if (userObject instanceof TransformerNodeAttribute transformerNodeAttribute) {
//                typeField.setText(transformerNodeAttribute.getType());
//                minField.setText(transformerNodeAttribute.getMinLength().toString());
//                maxField.setText(transformerNodeAttribute.getMaxLength().toString());
//                jTextArea1.setText(transformerNodeAttribute.getDesc());
//                isReq.setSelected(transformerNodeAttribute.getReq().equals("true"));
//            }
        }
//        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
//
//        if (selectedNode != null) {
//            Object userObject = selectedNode.getUserObject();
//
//            if (userObject instanceof DefaultMutableTreeNode) {
//                DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode) userObject;
//                TransformerNodeAttribute transformerNodeAttribute = (TransformerNodeAttribute) treeNode.getUserObject();
//                //treeNode.get
//
//                //nameField.setText(transformerNodeAttribute.getNode().getKey());
//                //valueField.setText(transformerNodeAttribute.getValue());
//                typeField.setText(transformerNodeAttribute.getType());
//                minField.setText(transformerNodeAttribute.getMinLength().toString());
//                maxField.setText(transformerNodeAttribute.getMaxLength().toString());
//                jTextArea1.setText(transformerNodeAttribute.getDesc());
//                if(transformerNodeAttribute.getReq().equals("true")){
//                    isReq.setSelected(true);
//                }else{
//                    isReq.setSelected(false);
//                }
//                
//            }
//        }
    }
    
    public List<TransformedNode> convertJTreeToList(DefaultMutableTreeNode rootNode) {
        List<TransformedNode> transformedNodes = new ArrayList<>();
        if (rootNode != null) {
            traverseTree(rootNode, transformedNodes);
        }
        return transformedNodes;
    }

    // Recursive method to traverse the tree
    private void traverseTree(DefaultMutableTreeNode node, List<TransformedNode> transformedNodes) {
        Object userObject = node.getUserObject();
        if (userObject instanceof TransformedNode) {
            TransformedNode transformedNode = (TransformedNode) userObject;
            transformedNodes.add(transformedNode);
        }

        Enumeration<TreeNode> children = node.children();
        while (children.hasMoreElements()) {
            DefaultMutableTreeNode childNode = (DefaultMutableTreeNode) children.nextElement();
            traverseTree(childNode, transformedNodes);
        }
    }
    public List<TransformedNode> getUpdatedNodes (){
        DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) jTree1.getModel().getRoot();
        List<TransformedNode> updatedNodes = convertJTreeToList(rootNode);
        return updatedNodes;
    } 
}
